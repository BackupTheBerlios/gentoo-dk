<?xml version='1.0' encoding="UTF-8"?>
<!-- $Header: /home/xubuntu/berlios_backup/github/tmp-cvs/gentoo-dk/Repository/docs/not_translated/Attic/altinstall.xml,v 1.6 2004/07/26 20:38:23 broeman Exp $ -->
<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<guide link="/doc/en/altinstall.xml">

<title>Gentoo Linux alternative installationsmetoder HOWTO</title>

<author title="Bidrager">
  <mail link="gerrynjr@gentoo.org">Gerald Normandin Jr.</mail>
</author>
<author title="Bidrager">
  <mail link="lordviram@rebelpacket.net">Travis Tilley</mail>
</author>
<author title="Bidrager">
  <mail link="volontir@yahoo.com">Oleg Raisky</mail>
</author>
<author title="Bidrager">
  <mail link="luminousit@hotmail.com">Alex Garbutt</mail>
</author>
<author title="Bidrager">
  <mail link="alex@openvs.com">Alexandre Georges</mail>
</author>
<author title="Bidrager">
  <mail link="vargen@b0d.org">Magnus Backanda</mail>
</author>
<author title="Bidrager">
  <mail link="davoid@gentoo.org">Faust A. Tanasescu</mail>
</author>
<author title="Bidrager">
  <mail link="aliz@gentoo.org">Daniel Ahlberg</mail>
</author>
<author title="Redaktør">
  <mail link="swift@gentoo.org">Sven Vermeulen</mail>
</author>
<author title="Gennemlæsning">
  <mail link="antifa@gentoo.org">Ken Nowack</mail>
</author>
<author title="Redaktør">
  <mail link="blubber@gentoo.org">Tiemo Kieft</mail>
</author>
<author title="Oversættelse">
  <mail link="broeman@gentoo.org">Jesper Brodersen</mail>
</author>

<abstract>
Denne HOWTO er ment som et arkiv af alternative Gentoo installationsmetoder, til dem med specielle installationsbehov, som f.eks. mangel af en CDROM eller en computer, der kan boote CD'er.
</abstract>

<license/>

<version>0.43</version>
<date>12. Juli, 2004</date>

<chapter>
<title>Om dette dokument</title>
<section>
<body>

<p>
Hvis den normale boot-fra-CD installationsmetode ikke virker for dig (eller du bare ikke ønsker det), er hjælp nu til rådighed. Dette dokument tjener formålet med at levere et arkiv af alternative Gentoo Linux installationsteknikker for dem, der mangler det.
Eller, hvis du ønsker det, tjener den formålet med at levere et sted for at tilføje dine mærkelige installationsmetoder.
Hvis du har en installationsmetode, som du selv synes er brugbart, eller du har udtænkt en sjov metode for at installere Gentoo, hold dig endelig ikke tilbage med at skrive noget og <mail link="antifa@gentoo.org">sende det til mig</mail> (på Engelsk).
</p>

</body>
</section>
</chapter>

<chapter>
<title>Opstart med LiveCDen med "Smart BootManager"</title>
<section>
<body>

<p>
Hent Smart BootManager <uri
link="http://btmgr.sourceforge.net/index.php3?body=download.html">http://btmgr.sourceforge.net/index.php3?body=download.html</uri>.
Linux kildekoder eller binær format og windows .exe versioner er til rådighed, samt mange sprog-pakker. Dog, på dette tidspunkt, den anbefalede metode ville være at bruge det binære format, idet kildekoderne ikke kan samles med nyere versioner af NASM.
</p>

<p>
Enten samler du pakken fra kildekoderne eller hente den binære fil. Der er flere valgmuligheder, som kan blive udført imens du opretter din opstartdiskette, som set forneden.
</p>

<pre caption="Smart BootManagers valgmuligheder">
<i>sbminst [-t theme] [-d drv] [-b backup_file] [-u backup_file]

   -t theme     select the theme to be used, in which the theme could be:
                   us = English theme       de = German theme 
                  hu = Hungarian theme     zh = Chinese theme 
                  ru = Russian theme       cz = Czech theme
                  es = Spanish theme       fr = French theme 
                   pt = Portuguese theme 

                 
  -d drv       set the drive that you want to install Smart BootManager on;
                for Linux:
                  /dev/fd0 is the first floppy driver, 
                  /dev/hda is the first IDE harddisk driver.
                   /dev/sda is the first SCSI harddisk driver.
                for DOS:
                   0   is the first floppy drive
                   128 is the first hard drive;

   -c             disable CD-ROM booting feature;

   -b backup_file backup the data that will be overwritten for
                  future uninstallation;

   -u backup_file uninstall Smart BootManager, should be used alone;

   -y             do not ask any question or warning.</i>
</pre>

<pre caption="Brug af sbminst for at bygge opstartsdisketten">
# <i>sbminst -t us  -d /dev/fd0</i>
</pre>

<note>
Erstat fd0 med din respektive floppy-drevs enhedsnavn, hvis din er anderledes.
</note>

<p>
Indsæt nu bare disketten i diskette-drevet på den computer, hvorpå du ønsker at opstarte LiveCDen, samt placere LiveCDen i CDROM-drevet og opstart computeren.
</p>

<p>
Du vil blive hilst af Smart BootManagerens dialog. Vælg dit CDROM-drev og
tast ENTER for at starte LiveCDen. Når opstartsprocessen er afsluttet, fortsæt med de normale installationsinstruktioner.
</p>

<p>
Flere informationer omkring Smart BootManager kan blive fundet på
<uri>http://btmgr.sourceforge.net/</uri>
</p>

</body>
</section>
</chapter>

<chapter>
<title>Knoppix installation</title>
<section>
<body>

<p>
Opstart fra <uri link="http://www.knoppix.org/">Knoppix</uri>-LiveCDen er en metode for at få et fuldt funktionelt Linux system, imens du samler Gentoo. Tux
Racer vil hjælpe dig med at få tiden til at gå, imens du venter på bootstrap.
</p>

<p>
Opstart fra Knoppix CDen. Den laver generelt et godt job med hardware-findingen. Det kan dog være at du skal tilføje nogle opstarts-valgmuligheder.
</p>

<p>
Som standard, opstarter Knoppix ind på en KDE 3.0 arbejdsplads. Den første ting, som jeg gjorde var at åbne en konsol og taste <c>sudo passwd root</c>. Dette lader dig ændre root-kodeordet for Knoppix.
</p>

<p>
Derefter, su'er jeg til root og taster <c>usermod -d /root -m root</c>. Dette sætter brugeren roots hjemmefolder til /root ("the Gentoo way") fra /home/root ("the Knoppix way"). Hvis du ikke gør dette, vil du modtage fejl, når du emerger, som f.eks. "/home/root: not found" eller noget lignende.
</p>

<p>
Så indtaster jeg <c>exit</c> og så <c>su</c>'er tilbage til root. Dette henter ændringerne, som var blevet lavet med usermod-kommandoen. Opret nu <path>/mnt/gentoo</path> mountpunktet ved brug af <c>mkdir</c>:
</p>

<pre caption="Oprettelse af /mnt/gentoo mountpunkt">
# <i>mkdir /mnt/gentoo</i>
</pre>

<p>
På dette tidspunkt, kan du forsætte med installationsdokumentationen fra <uri link="/doc/da/handbook/handbook-x86.xml?part=1&amp;chap=4">4. kapitel</uri>.
Dog, når du bliver spurgt om at mounte proc systemet, udfør følgende kommando, i stedet for:
</p>

<pre caption="Bind-mounting af proc pseudo filsystemet">
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
</pre>

</body>
</section>
</chapter>

<chapter>
<title>Installation fra stage 1 uden netværksadgang</title>
<section>
<body>

<p>
Brænd en LiveCD iso-fil.
</p>

<p>
Få den sidste nye portage snapshot fra
<uri>http://distro.ibiblio.org/pub/linux/distributions/gentoo/snapshots/</uri>
(eller dit favorit <uri
link="http://www.gentoo.org/main/en/mirrors.xml">filspejl</uri>). Enten placer denne tarball på en eksisterende partition på den computer, du installerer på, eller brænd den til en CD.
</p>

<p>
Følg alle instruktionerne i Gentoo installationshåndbog op til <c>chroot
/mnt/gentoo</c> i kapitel 6. Hvis du kun har et CDROM-drev, så husk at bruge <c>cdcache</c> valgmuligheden, imens du opstarter, så du kan unmounte LiveCDen og mounte din portage snapshot CD.
</p>

<p>
Åben en ny konsol (Alt-F2), og følg installationsdokumentationen op til det kørende bootstrap.sh script.
</p>

<warn>
Ældre udgivelser af LiveCDen kræver at du ændrer kodeordet ved brug af <c>passwd</c>-kommandoen, før du logger ind manuelt.
</warn>		   

<p>
Gå tilbage til den første konsol (Alt-F1, uden chroot) og mount en anden CD på
<path>/mnt/gentoo/mnt/cdrom2</path>. Kopier portage tarballen fra cdrom2 og udpak den til <path>/mnt/gentoo/usr/portage</path>.
</p>

<pre caption="Mount af snapshot cd">
# <i>umount /mnt/cdrom</i>
# <i>mkdir /mnt/gentoo/mnt/cdrom2</i>
# <i>mount /dev/cdroms/cdrom0 /mnt/gentoo/mnt/cdrom2</i>
# <i>cp /mnt/gentoo/mnt/cdrom2/portage-$date.tar.bz2 /mnt/gentoo/usr/portage</i>
# <i>cd /mnt/gentoo/usr/portage</i>
# <i>tar xvjpf portage-$date.tar.bz2</i>
</pre>

<p>
Skift tilbage til F2 konsollen. Hvis du nu prøver at kører bootstrap.sh, vil den fejle, fordi den ikke har mulighed for at hente nogen filer. Vi vil nu fange disse filer et andetsteds og putte dem i /usr/portage/distfiles (på F2 konsollen).
</p>

<p>
Du behøver en liste af stage 1 pakker: glibc, baselayout, texinfo, gettext, zlib, binutils, gcc, ncurses samt deres afhængigheder.
</p>

<note>
Noter at du skal have versionerne af hver pakke synced med dit portage-træ.
</note>

<pre caption="Opnåelse af hente-listen">
<comment>(Glem ikke 2 foran &gt;)</comment>
# <i>emerge -fp glibc baselayout texinfo gettext zlib binutils gcc ncurses 2&gt; stage1.list</i>
# <i>mount -t vfat /dev/fd0 /mnt/floppy</i>
# <i>cp /mnt/gentoo/stage1.list /mnt/floppy</i>
# <i>umount /mnt/floppy</i>
</pre>

<p>
Tag disketten til computer, som har hurtig adgang. Hvis du tager et kig på <path>stage1.list</path>-filen, vil du se at den giver dig flere steder for at hente. Desværre, oplister den også forskellige URLs til hver pakke, som ikke hvad du ønsker. Ryd op i alle, undtagen en af URLene først:
</p>

<pre caption="Oprydning af URLs">
<comment>(Dette script er afhængig af output-formatet givet ved emerge, som kan ændres i fremtiden uden videre at blive sagt - brug den med forsigtighed!)</comment>
# <i>cut -f 1 -d ' ' stage1.list > stage1.download</i>
</pre>

<p>
Brug nu <c>wget</c> til at fange alle de oplistede kilder:
</p>

<pre caption="Brug af wget for at fange dine kildepakker">
# <i>wget -N -i stage1.download</i>
</pre>

<p>
Når du har opnået alle filerne, tag dem til din computer og kopier dem til <path>/mnt/gentoo/usr/portage/distfiles</path>. Nu vil du have mulighed for at køre <c>bootstrap.sh</c>. Gentag den samme "wget-fangst og -placer" procedure til stage 2 og 3.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Diskless install using PXE boot</title>
<section>
<title>Requirements</title>
<body>

<p>
You will need a network card on the diskless client that uses the PXE protocol
to boot, like many 3com cards. You will also need a BIOS that supports booting
from PXE.
</p>

</body>
</section>
<section>
<title>Server base setup</title>
<body>

<p>
Create directories: The first thing to do is to create the directories where
your diskless system will be stored. Create a directory called
<path>/diskless</path> which houses a directory for each diskless client. For
the rest of this howto we'll be working on the client 'eta'.
</p>

<pre caption="directory setup">
# <i>mkdir /diskless</i>
# <i>mkdir /diskless/eta</i>
# <i>mkdir /diskless/eta/boot</i>
</pre>

<p>
DHCP and TFTP setup: The client will get boot informations using DHCP and
download all the required files using TFTP. Just emerge DHCP and configure it
for your basic needs. Then, add the following on
<path>/etc/dhcp/dhcpd.conf</path>.
</p>

<note>
This provide a static IP address for the client and the path of a PXE boot
image, here pxegrub. You have to replace the MAC address of the Ethernet card
of the client and the directory where you will put the client files with the
one you use.
</note>

<pre caption="dhcp.conf">
option option-150 code 150 = text ;
host eta {
hardware ethernet 00:00:00:00:00:00;
fixed-address <i>ip.add.re.ss</i>;
option option-150 "/eta/boot/grub.lst";
filename "/eta/boot/pxegrub";
}
</pre>

<p>
For TFTP, emerge <c>app-admin/tftp-hpa</c>. In
<path>/etc/conf.d/in.tftpd</path>, put the following :
</p>

<pre caption="in.tftpd">
INTFTPD_PATH="/diskless"
INTFTPD_USER="nobody"
INTFTPD_OPTS="-u ${INTFTPD_USER} -l -vvvvvv -p -c -s ${INTFTPD_PATH}"
</pre>

<p>
Setup GRUB: To provide PXE booting I use GRUB. You have to compile it by
yourself to enable the PXE image compilation ... but that's quite easy. First,
get the latest version of the GRUB source code (<c>emerge -f grub</c> will
place the tarball in <path>/usr/portage/distfiles</path>). Copy the tarball to
<path>/diskless</path> and then build it to make the pxe capable binary. Once
the binary is built, copy it to the diskless client's boot directory. Then edit
it's grub.lst config file.
</p>

<pre caption="grub setup">
# <i>tar zxvf grub-0.92.tar.gz</i>
# <i>cd grub-0.92</i>
# <i>./configure --help</i>
<codenote>In the options you will see a list of supported network interface drivers. </codenote>
<codenote>Select the driver compatible with your card. Herein referenced a $nic</codenote>
# <i>./configure --enable-diskless --enable-$nic</i>
# <i>make</i>
# <i>cd stage2</i>
# <i>cp pxegrub /diskless/eta/boot/pxegrub</i>
# <i>nano -w /diskless/eta/boot/grub.lst</i>
</pre>

<pre caption="grub.lst">
default 0
timeout 30

title=Diskless Gentoo
root (nd)
kernel /eta/bzImage ip=dhcp root=/dev/nfs nfsroot=<i>ip.add.re.ss</i>:/diskless/eta

<codenote>For the nfsroot option, the IP address is the one of the server and </codenote>
<codenote>the directory is the one where your diskless client files are located (on the server).</codenote>
</pre>

<p>
Setup NFS: NFS is quite easy to configure. The only thing you have to do is to
add a line on the <path>/etc/exports</path> config file :
</p>

<pre caption="/etc/exports">
# <i>nano -w /etc/exports</i>
# /etc/exports: NFS file systems being exported.  See exports(5).
/diskless/eta eta(rw,sync,no_root_squash)
</pre>

<p>
Update your hosts:  One important thing to do now is to modify your
<path>/etc/hosts</path> file to fit your needs.
</p>

<pre caption="/etc/hosts">
127.0.0.1 localhost

192.168.1.10 eta.example.com eta
192.168.1.20 sigma.example.com sigma
</pre>

</body>
</section>
<section>
<title>Creating the system on the server</title>
<body>

<p>
Reboot the server on a Gentoo LiveCD. Follow the standard install procedure as
explained in the Gentoo Install Howto BUT with the following differences. When
you mount the file system, do the following (where hdaX is the partition where
you created the /diskless directory). You do not need to mount any other
partitions as all of the files will reside in the <path>/diskless/eta</path>
directory.
</p>

<pre caption="mounting the filesystem">
#<i> mount /dev/hda3 /mnt/gentoo</i>
</pre>

<p>
Stage tarballs and chroot: This example uses a stage3 tarball. Mount
<path>/proc</path> to your diskless directory and chroot into it to continue
with the install. Then follow the installation manual until kernel
configuration.
</p>

<warn>
Be very careful where you extract your stage tarball. You don't want to end up
extracting over your existing installation.
</warn>

<pre caption="extracting the stage tarball">
# <i>cd /mnt/gentoo/diskless/eta/</i>
# <i>tar -xvjpf  /mnt/cdrom/gentoo/stage3-*.tar.bz2</i>
# <i>mount -t proc /proc /mnt/gentoo/diskless/eta/proc</i>
# <i>cp /etc/resolv.conf /mnt/gentoo/diskless/eta/etc/resolv.conf</i>
# <i>chroot /mnt/gentoo/diskless/eta/ /bin/bash</i>
# <i>env-update</i>
# <i>source /etc/profile</i>
</pre>

<p>
Kernel configuration: When you do the <c>make menuconfig</c> of your kernel
configuration, don't forget to enable the following options with the others
recommended into the install howto.
</p>

<pre caption="menuconfig options">
- Your network card device support

- Under "Networking options" :

[*] TCP/IP networking
[*] IP: kernel level autoconfiguration
[*] IP: DHCP support
[*] IP: BOOTP support


- Under "File systems --> Network File Systems" :

&lt;*&gt; NFS file system support
[*] Provide NFSv3 client support
[*] Root file system on NFS
</pre>

<p>
Next configure your diskless client's <path>/etc/fstab</path>.
</p>

<pre caption="/etc/fstab">
# <i>nano -w /etc/fstab</i>
/dev/cdroms/cdrom0 /mnt/cdrom iso9660 noauto,ro 0 0
proc /proc proc defaults 0 0
tmpfs /dev/shm tmpfs defaults 0 0
</pre>

<p>
Bootloader. Don't install another bootloader because we already have one -
pxegrub. Simply finish the install and restart the server. Start the services
you'll need to boot the new client: DHCP, TFTPD, and NFS.
</p>

<pre caption="Starting services">
# <i>/etc/init.d/dhcp start</i>
# <i>/etc/init.d/tftpd start</i>
# <i>/etc/init.d/nfs start</i>
</pre>

</body>
</section>
<section>
<title>Booting the new client</title>
<body>

<p>
For the new client to boot properly, you'll need to configure the bios and the
network card to use PXE as the first boot method - before CD-ROM or floppy. For
help with this consult your hardware manuals or manufacturers website. The
network card should get an IP address using DHCP and download the GRUB PXE
image using TFTP. Then, you should see a nice black and white GRUB bootmenu
where you will select the kernel to boot and press Enter. If everything is ok
the kernel should boot, mount the root filesystem using NFS and provide you
with a login prompt. Enjoy.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Installing Gentoo from an existing Linux distribution</title> 
<section>
<title>Requirements</title>
<body>

<p>
In order to install Gentoo from your existing Linux distribution you need to
have chroot command installed, and have a copy of the Gentoo installation
tarball or ISO you want to install. A network connection would be preferable if
you want more than what's supplied in your tarball. (by the way, a tarball is
just a file ending in .tbz or .tar.gz). The author used RedHat Linux 7.3 as the
"host" operating system, but it is not very important.  Let's get started!
</p>

</body>
</section>
<section>
<title>Overview</title>
<body>

<p>
We will first allocate a partition to Gentoo by resizing our existing Linux
partition, mount the partition, untar the tarball that is mounted, chroot
inside the psuedo-system and start building. Once the bootstrap process is
done, we will do some final configuration on the system so as to make sure it
boots, then we are ready to reboot and use Gentoo.
</p>

</body>
</section>
<section>
<title>How should we make space for Gentoo?</title>
<body>

<p>
The root partition is the filesystem mounted under <path>/</path>. A quick run
of mount on my system shows what I am talking about. We well also use df (disk
free) to see how much space I have left and how I will be resizing. Note that
it is not mandatory to resize your root partition! You could be resizing
anything else supported by our resizer, but let's talk about that later.
</p>

<pre caption="Filesystem information">
# <i>mount</i>
/dev/hdb2 on / type ext3 (rw) 
none on /proc type proc (rw) 
none on /dev/pts type devpts (rw,gid=5,mode=620) 
none on /dev/shm type tmpfs (rw) 
# <i>df -h </i>
Filesystem           Size Used Avail Use% Mounted on 
/dev/hdb2            4.0G 1.9G  2.4G  82% /
none		      38M    0    38M   0% /dev/shm 
</pre>

<p>
As we can see, the partition mounted as <path>/</path> named
<path>/dev/hdb2</path> has 2.4 gigabytes free. In my case, I think I will
resize it as to leave 400Megs free of space, therefore allocating 2 gigabytes
for Gentoo. Not bad, I could have quite some stuff installed. However, think
that even one gigabyte is enough for most users. So let's partition this thing!
</p>

</body>
</section>
<section>
<title>Building parted to resize partition</title> 
<body>

<p>
Parted is an utility supplied by the GNU foundation, an old and respectable
huge project whose software you are using in this very moment. There is one
tool, however, that is extremely useful for us at the moment. It's called
parted, partition editor and we can get it from
<uri>http://www.gnu.org/software/parted/</uri>
</p>

<note>
There are other tools for doing resize of partitions as well, but author is
unsure/uninterested whether PartitionMagic(tm) or other software of the kind do
the job. It's the reader's job to check them out 
</note>

<p> 
Look up on that page the type of filesystem you want to resize and see if
parted can do it. If not, you're out of luck, you will have to destroy some
partition to make space for Gentoo, and reinstall back. Go ahead by downloading
the software, install it. Here we have a problem. We want to resize our Linux
root partition, therefore we must boot from a floppy disk a minimal linux
system and use previously-compiled parted copied to a diskette in order to
resize <path>/</path>.  However, if you can unmount the partition while still
in Linux you are lucky, you don't need to do what follows. Just compile parted
and run it on an unmounted partition you chose to resize. Here's how I did it
for my system.
</p>

<impo>
Make sure that the operations you want to do on your partition are supported by
parted!
</impo>

<p>
Get tomsrtbt boot/root disk (free of charge) from
<uri>http://freshmeat.net/tomsrtbt </uri>, create a floppy as suggested in the
Documentation that accompanies the software package and insert a new floppy in
the drive for the next step.
</p>

<note>
Note again that Linux is synonym of "There's one more way to do it". Your
objective is to run parted on an unmounted partition so it can do its work. You
might use some other boot/root diskset other than tomsrtbt. You might not even
need to do this step at all, that is only umount the filesystem you want to
repartition in your Linux session and run parted on it. 
</note>

<pre caption="Utility disk creation">
# <i>mkfs.minix /dev/fd0</i>
480 inodes
1440 blocks
Firstdatazone=19 (19)
Zonesize=1024
Maxsize=268966912
</pre>

<p>
We will now proceed with the build of parted. If it's not already downloaded
and untarred, do so now and cd into the corresponding directory. Now run the
following set of commands to build the utility and copy it to your floppy disk.
</p>

<pre caption="Building the utility floppy">
# <i> mkdir /floppy; mount -t minix /dev/fd0 /floppy &amp;&amp; 
export CFLAGS="-O3 -pipe -fomit-frame-pointer -static" &amp;&amp; ./configure 
&amp;&amp; make &amp;&amp; cp parted/parted /floppy &amp;&amp; umount /floppy </i>
</pre>

<p>
Congratulations, you are ready to reboot and resize your partition. Do this
only after taking a quick look at the parted documentation on the GNU website.
The resize should take under 30 minutes for the largest hard-drives, be
patient.  Reboot your system with the tomsrtbt boot disk (just pop it inside),
and once you are logged in, switch the disk in the drive with your utility disk
we have created above and type mount /dev/fd0 /floppy to have parted under
/floppy.  There you go. Run parted and you will be able to resize your
partition. Once this lenghty process done, we are ready to have the real fun,
by installing Gentoo. Reboot back into your old Linux system for now. Drive you
wish to operate on is the drive containing the partition we want to resize. For
example, if we want to resize /dev/hda3, the drive is /dev/hda
</p>

<pre caption="Commands to run once logged into tomsrtbt system">
# <i>mount /dev/fd0 /floppy </i>
# <i>cd /floppy; ./parted [drive you wish to operate on]</i>
(parted) <i> print </i>
Disk geometry for /dev/hdb: 0.000-9787.148 megabytes
Disk label type: msdos
Minor    Start       End     Type      Filesystem  Flags
1          0.031   2953.125  primary   ntfs        
3       2953.125   3133.265  primary   linux-swap  
2       3133.266   5633.085  primary   ext3        
4       5633.086   9787.148  extended              
5       5633.117   6633.210  logical               
6       6633.242   9787.148  logical   ext3        
(parted) <i> help resize </i>
  resize MINOR START END        resize filesystem on partition MINOR

        MINOR is the partition number used by Linux.  On msdos disk labels, the
        primary partitions number from 1-4, and logical partitions are 5
        onwards.
        START and END are in megabytes
(parted) <i> resize 2 3133.266 4000.000 </i>
</pre>

<impo>
Be patient! The computer is working! Just look at the hardware LED on your case
to see that it is really working. This should take between 2 and 30 minutes.
</impo>

<p>
Once you have resized, boot back into your old linux as described. Then go to
<uri link="/doc/en/handbook/handbook-x86.xml?part=1&amp;chap=4">The Gentoo
Handbook: Preparing the Disks</uri> and follow the instructions. When
chrooting, use the following command to flush your environment:
</p>

<pre caption="Flushing the environment during chroot">
# <i>env -i /usr/sbin/chroot /mnt/gentoo /bin/bash</i>
</pre>

<p>
Enjoy!
</p>

</body>
</section>
</chapter>

</guide>
